
AVRASM ver. 2.1.30  C:\Users\mehrd\Desktop\4012\rizpardazande\digitalClock - Copy\Debug\List\project.asm Sat Jul 01 17:13:12 2023

C:\Users\mehrd\Desktop\4012\rizpardazande\digitalClock - Copy\Debug\List\project.asm(1086): warning: Register r5 already defined by the .DEF directive
C:\Users\mehrd\Desktop\4012\rizpardazande\digitalClock - Copy\Debug\List\project.asm(1087): warning: Register r4 already defined by the .DEF directive
C:\Users\mehrd\Desktop\4012\rizpardazande\digitalClock - Copy\Debug\List\project.asm(1088): warning: Register r7 already defined by the .DEF directive
C:\Users\mehrd\Desktop\4012\rizpardazande\digitalClock - Copy\Debug\List\project.asm(1089): warning: Register r6 already defined by the .DEF directive
C:\Users\mehrd\Desktop\4012\rizpardazande\digitalClock - Copy\Debug\List\project.asm(1090): warning: Register r9 already defined by the .DEF directive
C:\Users\mehrd\Desktop\4012\rizpardazande\digitalClock - Copy\Debug\List\project.asm(1091): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _minute=R5
                 	.DEF _hour=R4
                 	.DEF _second=R7
                 	.DEF _alarmH=R6
                 	.DEF _alarmM=R9
                 	.DEF _i=R8
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c025      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 c0dd      	RJMP _timer2_ovf_isr
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000013 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000014 000c
000015 0000      	.DB  0xC,0x0,0x0,0x0
000016 0000      	.DB  0x0,0x0
                 
                 _0x3:
000017 7940
000018 3024
000019 1219
00001a 7802      	.DB  0x40,0x79,0x24,0x30,0x19,0x12,0x2,0x78
00001b 1000      	.DB  0x0,0x10
                 
                 __GLOBAL_INI_TBL:
00001c 0001      	.DW  0x01
00001d 0002      	.DW  0x02
00001e 0026      	.DW  __REG_BIT_VARS*2
                 
00001f 0006      	.DW  0x06
000020 0004      	.DW  0x04
000021 0028      	.DW  __REG_VARS*2
                 
000022 000a      	.DW  0x0A
000023 0160      	.DW  _anode_seg
000024 002e      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
000025 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000026 94f8      	CLI
000027 27ee      	CLR  R30
000028 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000029 e0f1      	LDI  R31,1
00002a bffb      	OUT  GICR,R31
00002b bfeb      	OUT  GICR,R30
00002c bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00002d e08d      	LDI  R24,(14-2)+1
00002e e0a2      	LDI  R26,2
00002f 27bb      	CLR  R27
                 __CLEAR_REG:
000030 93ed      	ST   X+,R30
000031 958a      	DEC  R24
000032 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000033 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000034 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000035 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000036 93ed      	ST   X+,R30
000037 9701      	SBIW R24,1
000038 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000039 e3e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00003a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00003b 9185      	LPM  R24,Z+
00003c 9195      	LPM  R25,Z+
00003d 9700      	SBIW R24,0
00003e f061      	BREQ __GLOBAL_INI_END
00003f 91a5      	LPM  R26,Z+
000040 91b5      	LPM  R27,Z+
000041 9005      	LPM  R0,Z+
000042 9015      	LPM  R1,Z+
000043 01bf      	MOVW R22,R30
000044 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000045 9005      	LPM  R0,Z+
000046 920d      	ST   X+,R0
000047 9701      	SBIW R24,1
000048 f7e1      	BRNE __GLOBAL_INI_LOOP
000049 01fb      	MOVW R30,R22
00004a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00004b e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00004c bfed      	OUT  SPL,R30
00004d e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00004e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00004f e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000050 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000051 c010      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;char anode_seg[] = {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x78, 0x00, 0x10};
                 
                 	.DSEG
                 ;
                 ;unsigned char minute = 0, hour = 12, second = 0, alarmH = 0, alarmM = 0;
                 ;unsigned char i;
                 ;bit setAlarm = 0;
                 ;bit alarm = 0;
                 ;void display_digit(unsigned char digit, unsigned char comm_value)
                 ; 0000 000B {
                 
                 	.CSEG
                 _display_digit:
                 ; .FSTART _display_digit
                 ; 0000 000C     PORTD = anode_seg[digit];
000052 93aa      	ST   -Y,R26
                 ;	digit -> Y+1
                 ;	comm_value -> Y+0
000053 81e9      	LDD  R30,Y+1
000054 e0f0      	LDI  R31,0
000055 5ae0      	SUBI R30,LOW(-_anode_seg)
000056 4ffe      	SBCI R31,HIGH(-_anode_seg)
000057 81e0      	LD   R30,Z
000058 bbe2      	OUT  0x12,R30
                 ; 0000 000D     PORTC = comm_value;
000059 81e8      	LD   R30,Y
00005a bbe5      	OUT  0x15,R30
                 ; 0000 000E     delay_us(4);
                +
00005b e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
00005c 958a     +DEC R24
00005d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
                 ; 0000 000F     PORTC = 0x00;
00005e e0e0      	LDI  R30,LOW(0)
00005f bbe5      	OUT  0x15,R30
                 ; 0000 0010 }
000060 9622      	ADIW R28,2
000061 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0013 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0014     DDRD = 0xFF;
000062 efef      	LDI  R30,LOW(255)
000063 bbe1      	OUT  0x11,R30
                 ; 0000 0015     PORTD = 0x00;
000064 e0e0      	LDI  R30,LOW(0)
000065 bbe2      	OUT  0x12,R30
                 ; 0000 0016 
                 ; 0000 0017     DDRB = 0b00000011;
000066 e0e3      	LDI  R30,LOW(3)
000067 bbe7      	OUT  0x17,R30
                 ; 0000 0018     PORTB = 0b00111100;
000068 e3ec      	LDI  R30,LOW(60)
000069 bbe8      	OUT  0x18,R30
                 ; 0000 0019 
                 ; 0000 001A     PORTC = 0x00;
00006a e0e0      	LDI  R30,LOW(0)
00006b bbe5      	OUT  0x15,R30
                 ; 0000 001B     DDRC = 0xFF;
00006c efef      	LDI  R30,LOW(255)
00006d bbe4      	OUT  0x14,R30
                 ; 0000 001C 
                 ; 0000 001D     ASSR = 0x08;
00006e e0e8      	LDI  R30,LOW(8)
00006f bde2      	OUT  0x22,R30
                 ; 0000 001E     TCCR2 = 0x05;
000070 e0e5      	LDI  R30,LOW(5)
000071 bde5      	OUT  0x25,R30
                 ; 0000 001F     TCNT2 = 0x00;
000072 e0e0      	LDI  R30,LOW(0)
000073 bde4      	OUT  0x24,R30
                 ; 0000 0020     OCR2 = 0x00;
000074 bde3      	OUT  0x23,R30
                 ; 0000 0021     TIMSK = 0x40;
000075 e4e0      	LDI  R30,LOW(64)
000076 bfe9      	OUT  0x39,R30
                 ; 0000 0022     #asm("sei")
000077 9478      	sei
                 ; 0000 0023 
                 ; 0000 0024     while (1)
                 _0x4:
                 ; 0000 0025     {
                 ; 0000 0026         if(PINB.3 == 0){
000078 99b3      	SBIC 0x16,3
000079 c00f      	RJMP _0x7
                 ; 0000 0027             if(setAlarm==0){
00007a fc20      	SBRC R2,0
00007b c006      	RJMP _0x8
                 ; 0000 0028                 hour++;
00007c 9443      	INC  R4
                 ; 0000 0029                 if (hour > 23) hour = 0;
00007d e1e7      	LDI  R30,LOW(23)
00007e 15e4      	CP   R30,R4
00007f f408      	BRSH _0x9
000080 2444      	CLR  R4
                 ; 0000 002A             }else{
                 _0x9:
000081 c005      	RJMP _0xA
                 _0x8:
                 ; 0000 002B                 alarmH++;
000082 9463      	INC  R6
                 ; 0000 002C               if (alarmH > 23) alarmH = 0;
000083 e1e7      	LDI  R30,LOW(23)
000084 15e6      	CP   R30,R6
000085 f408      	BRSH _0xB
000086 2466      	CLR  R6
                 ; 0000 002D             }
                 _0xB:
                 _0xA:
                 ; 0000 002E             while(PINB.3==0);
                 _0xC:
000087 9bb3      	SBIS 0x16,3
000088 cffe      	RJMP _0xC
                 ; 0000 002F         }
                 ; 0000 0030 
                 ; 0000 0031         if(PINB.4 == 0){
                 _0x7:
000089 99b4      	SBIC 0x16,4
00008a c00f      	RJMP _0xF
                 ; 0000 0032             if(setAlarm==0){
00008b fc20      	SBRC R2,0
00008c c006      	RJMP _0x10
                 ; 0000 0033                 minute++;
00008d 9453      	INC  R5
                 ; 0000 0034                 if (minute > 59) minute = 0;
00008e e3eb      	LDI  R30,LOW(59)
00008f 15e5      	CP   R30,R5
000090 f408      	BRSH _0x11
000091 2455      	CLR  R5
                 ; 0000 0035             }else{
                 _0x11:
000092 c005      	RJMP _0x12
                 _0x10:
                 ; 0000 0036                 alarmM++;
000093 9493      	INC  R9
                 ; 0000 0037                 if(alarmM > 59) alarmM = 0;
000094 e3eb      	LDI  R30,LOW(59)
000095 15e9      	CP   R30,R9
000096 f408      	BRSH _0x13
000097 2499      	CLR  R9
                 ; 0000 0038             }
                 _0x13:
                 _0x12:
                 ; 0000 0039             while(PINB.4==0);
                 _0x14:
000098 9bb4      	SBIS 0x16,4
000099 cffe      	RJMP _0x14
                 ; 0000 003A         }
                 ; 0000 003B 
                 ; 0000 003C         if (PINB.5 == 0)
                 _0xF:
00009a 99b5      	SBIC 0x16,5
00009b c006      	RJMP _0x17
                 ; 0000 003D         {
                 ; 0000 003E            setAlarm = !setAlarm;
00009c e0e1      	LDI  R30,LOW(1)
00009d 262e      	EOR  R2,R30
                 ; 0000 003F            alarm=1;
00009e 9468      	SET
00009f f821      	BLD  R2,1
                 ; 0000 0040            while(PINB.5==0);
                 _0x18:
0000a0 9bb5      	SBIS 0x16,5
0000a1 cffe      	RJMP _0x18
                 ; 0000 0041         }
                 ; 0000 0042         if (PINB.2 == 0)
                 _0x17:
0000a2 99b2      	SBIC 0x16,2
0000a3 c005      	RJMP _0x1B
                 ; 0000 0043         {
                 ; 0000 0044            PORTB.0=0;
0000a4 98c0      	CBI  0x18,0
                 ; 0000 0045            alarm=0;
0000a5 94e8      	CLT
0000a6 f821      	BLD  R2,1
                 ; 0000 0046            while(PINB.5==0);
                 _0x1E:
0000a7 9bb5      	SBIS 0x16,5
0000a8 cffe      	RJMP _0x1E
                 ; 0000 0047         }
                 ; 0000 0048         if(setAlarm == 0){
                 _0x1B:
0000a9 fc20      	SBRC R2,0
0000aa c017      	RJMP _0x21
                 ; 0000 0049             for (i = 0; i < 200; i++)
0000ab 2488      	CLR  R8
                 _0x23:
0000ac ece8      	LDI  R30,LOW(200)
0000ad 168e      	CP   R8,R30
0000ae f490      	BRSH _0x24
                 ; 0000 004A             {
                 ; 0000 004B             display_digit(hour / 10, 0b00000001);
0000af 2da4      	MOV  R26,R4
0000b0 d052      	RCALL SUBOPT_0x0
0000b1 e0a1      	LDI  R26,LOW(1)
0000b2 df9f      	RCALL _display_digit
                 ; 0000 004C             display_digit(hour % 10, 0b00000010);
0000b3 2da4      	MOV  R26,R4
0000b4 d054      	RCALL SUBOPT_0x1
0000b5 e0a2      	LDI  R26,LOW(2)
0000b6 df9b      	RCALL _display_digit
                 ; 0000 004D             display_digit(minute / 10, 0b00000100);
0000b7 2da5      	MOV  R26,R5
0000b8 d04a      	RCALL SUBOPT_0x0
0000b9 e0a4      	LDI  R26,LOW(4)
0000ba df97      	RCALL _display_digit
                 ; 0000 004E             display_digit(minute % 10, 0b00001000);
0000bb 2da5      	MOV  R26,R5
0000bc d04c      	RCALL SUBOPT_0x1
0000bd e0a8      	LDI  R26,LOW(8)
0000be df93      	RCALL _display_digit
                 ; 0000 004F             }
0000bf 9483      	INC  R8
0000c0 cfeb      	RJMP _0x23
                 _0x24:
                 ; 0000 0050         }else{
0000c1 c016      	RJMP _0x25
                 _0x21:
                 ; 0000 0051             for (i = 0; i < 200; i++)
0000c2 2488      	CLR  R8
                 _0x27:
0000c3 ece8      	LDI  R30,LOW(200)
0000c4 168e      	CP   R8,R30
0000c5 f490      	BRSH _0x28
                 ; 0000 0052             {
                 ; 0000 0053             display_digit(alarmH / 10, 0b00000001);
0000c6 2da6      	MOV  R26,R6
0000c7 d03b      	RCALL SUBOPT_0x0
0000c8 e0a1      	LDI  R26,LOW(1)
0000c9 df88      	RCALL _display_digit
                 ; 0000 0054             display_digit(alarmH % 10, 0b00000010);
0000ca 2da6      	MOV  R26,R6
0000cb d03d      	RCALL SUBOPT_0x1
0000cc e0a2      	LDI  R26,LOW(2)
0000cd df84      	RCALL _display_digit
                 ; 0000 0055             display_digit(alarmM / 10, 0b00000100);
0000ce 2da9      	MOV  R26,R9
0000cf d033      	RCALL SUBOPT_0x0
0000d0 e0a4      	LDI  R26,LOW(4)
0000d1 df80      	RCALL _display_digit
                 ; 0000 0056             display_digit(alarmM % 10, 0b00001000);
0000d2 2da9      	MOV  R26,R9
0000d3 d035      	RCALL SUBOPT_0x1
0000d4 e0a8      	LDI  R26,LOW(8)
0000d5 df7c      	RCALL _display_digit
                 ; 0000 0057             }
0000d6 9483      	INC  R8
0000d7 cfeb      	RJMP _0x27
                 _0x28:
                 ; 0000 0058         }
                 _0x25:
                 ; 0000 0059         if((minute==alarmM) && (hour==alarmH) && alarm)PORTB.0=1;
0000d8 1495      	CP   R9,R5
0000d9 f421      	BRNE _0x2A
0000da 1464      	CP   R6,R4
0000db f411      	BRNE _0x2A
0000dc fc21      	SBRC R2,1
0000dd c001      	RJMP _0x2B
                 _0x2A:
0000de c001      	RJMP _0x29
                 _0x2B:
0000df 9ac0      	SBI  0x18,0
                 ; 0000 005A     }
                 _0x29:
0000e0 cf97      	RJMP _0x4
                 ; 0000 005B }
                 _0x2E:
0000e1 cfff      	RJMP _0x2E
                 ; .FEND
                 ;
                 ;interrupt[TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 005E {
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
0000e2 93ea      	ST   -Y,R30
0000e3 b7ef      	IN   R30,SREG
0000e4 93ea      	ST   -Y,R30
                 ; 0000 005F     second++;
0000e5 9473      	INC  R7
                 ; 0000 0060     if (second > 59) second = 0;
0000e6 e3eb      	LDI  R30,LOW(59)
0000e7 15e7      	CP   R30,R7
0000e8 f408      	BRSH _0x2F
0000e9 2477      	CLR  R7
                 ; 0000 0061     if (second == 0)
                 _0x2F:
0000ea 2077      	TST  R7
0000eb f461      	BRNE _0x30
                 ; 0000 0062     {
                 ; 0000 0063         minute++;
0000ec 9453      	INC  R5
                 ; 0000 0064         if (minute > 59) minute = 0;
0000ed e3eb      	LDI  R30,LOW(59)
0000ee 15e5      	CP   R30,R5
0000ef f408      	BRSH _0x31
0000f0 2455      	CLR  R5
                 ; 0000 0065         if (minute == 0)
                 _0x31:
0000f1 2055      	TST  R5
0000f2 f429      	BRNE _0x32
                 ; 0000 0066         {
                 ; 0000 0067             hour++;
0000f3 9443      	INC  R4
                 ; 0000 0068             if (hour > 23) hour = 0;
0000f4 e1e7      	LDI  R30,LOW(23)
0000f5 15e4      	CP   R30,R4
0000f6 f408      	BRSH _0x33
0000f7 2444      	CLR  R4
                 ; 0000 0069         }
                 _0x33:
                 ; 0000 006A     }
                 _0x32:
                 ; 0000 006B     if(setAlarm){
                 _0x30:
0000f8 fc20      	SBRC R2,0
                 ; 0000 006C         PORTB.1=1;
0000f9 c004      	RJMP _0x3A
                 ; 0000 006D     }else{
                 ; 0000 006E         PORTB.1=!PORTB.1;
0000fa 9bc1      	SBIS 0x18,1
0000fb c002      	RJMP _0x38
0000fc 98c1      	CBI  0x18,1
0000fd c001      	RJMP _0x39
                 _0x38:
                 _0x3A:
0000fe 9ac1      	SBI  0x18,1
                 _0x39:
                 ; 0000 006F     }
                 ; 0000 0070 }
0000ff 91e9      	LD   R30,Y+
000100 bfef      	OUT  SREG,R30
000101 91e9      	LD   R30,Y+
000102 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _anode_seg:
000160           	.BYTE 0xA
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x0:
000103 e0b0      	LDI  R27,0
000104 e0ea      	LDI  R30,LOW(10)
000105 e0f0      	LDI  R31,HIGH(10)
000106 d01f      	RCALL __DIVW21
000107 93ea      	ST   -Y,R30
000108 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1:
000109 27bb      	CLR  R27
00010a e0ea      	LDI  R30,LOW(10)
00010b e0f0      	LDI  R31,HIGH(10)
00010c d01e      	RCALL __MODW21
00010d 93ea      	ST   -Y,R30
00010e 9508      	RET
                 
                 
                 	.CSEG
                 __ANEGW1:
00010f 95f1      	NEG  R31
000110 95e1      	NEG  R30
000111 40f0      	SBCI R31,0
000112 9508      	RET
                 
                 __DIVW21U:
000113 2400      	CLR  R0
000114 2411      	CLR  R1
000115 e190      	LDI  R25,16
                 __DIVW21U1:
000116 0faa      	LSL  R26
000117 1fbb      	ROL  R27
000118 1c00      	ROL  R0
000119 1c11      	ROL  R1
00011a 1a0e      	SUB  R0,R30
00011b 0a1f      	SBC  R1,R31
00011c f418      	BRCC __DIVW21U2
00011d 0e0e      	ADD  R0,R30
00011e 1e1f      	ADC  R1,R31
00011f c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000120 60a1      	SBR  R26,1
                 __DIVW21U3:
000121 959a      	DEC  R25
000122 f799      	BRNE __DIVW21U1
000123 01fd      	MOVW R30,R26
000124 01d0      	MOVW R26,R0
000125 9508      	RET
                 
                 __DIVW21:
000126 d012      	RCALL __CHKSIGNW
000127 dfeb      	RCALL __DIVW21U
000128 f40e      	BRTC __DIVW211
000129 dfe5      	RCALL __ANEGW1
                 __DIVW211:
00012a 9508      	RET
                 
                 __MODW21:
00012b 94e8      	CLT
00012c ffb7      	SBRS R27,7
00012d c004      	RJMP __MODW211
00012e 95a0      	COM  R26
00012f 95b0      	COM  R27
000130 9611      	ADIW R26,1
000131 9468      	SET
                 __MODW211:
000132 fdf7      	SBRC R31,7
000133 dfdb      	RCALL __ANEGW1
000134 dfde      	RCALL __DIVW21U
000135 01fd      	MOVW R30,R26
000136 f40e      	BRTC __MODW212
000137 dfd7      	RCALL __ANEGW1
                 __MODW212:
000138 9508      	RET
                 
                 __CHKSIGNW:
000139 94e8      	CLT
00013a fff7      	SBRS R31,7
00013b c002      	RJMP __CHKSW1
00013c dfd2      	RCALL __ANEGW1
00013d 9468      	SET
                 __CHKSW1:
00013e ffb7      	SBRS R27,7
00013f c006      	RJMP __CHKSW2
000140 95a0      	COM  R26
000141 95b0      	COM  R27
000142 9611      	ADIW R26,1
000143 f800      	BLD  R0,0
000144 9403      	INC  R0
000145 fa00      	BST  R0,0
                 __CHKSW2:
000146 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :  12 r1 :   5 r2 :   8 r3 :   0 r4 :   9 r5 :  10 r6 :   6 r7 :   4 
r8 :   6 r9 :   6 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   4 r26:  29 r27:   9 r28:   2 r29:   1 r30:  78 r31:  13 
x  :   3 y  :   9 z  :   8 
Registers used: 21 out of 35 (60.0%)

ATmega8 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   3 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   1 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   9 brpl  :   0 brsh  :   9 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 cbi   :   2 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  14 
cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   4 cp    :  11 
cpc   :   0 cpi   :   0 cpse  :   0 dec   :   3 des   :   0 eor   :   1 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 
inc   :  10 ld    :   4 ldd   :   1 ldi   :  49 lds   :   0 lpm   :   7 
lsl   :   1 lsr   :   0 mov   :   8 movw  :   6 mul   :   0 muls  :   0 
mulsu :   0 neg   :   2 nop   :   0 or    :   0 ori   :   0 out   :  21 
pop   :   0 push  :   0 rcall :  25 ret   :   8 reti  :   1 rjmp  :  48 
rol   :   3 ror   :   0 sbc   :   1 sbci  :   2 sbi   :   2 sbic  :   4 
sbis  :   5 sbiw  :   3 sbr   :   1 sbrc  :   6 sbrs  :   3 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   3 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   8 std   :   0 
sts   :   0 sub   :   1 subi  :   1 swap  :   0 tst   :   2 wdr   :   0 

Instructions used: 49 out of 114 (43.0%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00028e    616     38    654    8192   8.0%
[.dseg] 0x000060 0x00016a      0     10     10    1024   1.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 6 warnings
